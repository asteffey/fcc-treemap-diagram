{"version":3,"sources":["components/DataSets.js","hooks/useD3.js","components/ScaledD3Container.js","d3/d3plus.js","d3/darkColorScheme19.js","d3/treemap.js","components/DataSetDisplay.js","components/DataSetSelector.js","components/App.js","serviceWorker.js","index.js"],"names":["DataSets","kickstarter","title","description","url","movies","games","useD3","fn","ref","useRef","useEffect","d3","current","SvgContainer","styled","div","ScaledD3Container","drawSvg","viewBox","width","height","draw","useCallback","svg","selectAll","remove","preserveAspectRatio","dsplus","tip","legendColor","textwrap","selection","prototype","appendForEach","obj","data","this","enter","append","forEach","action","each","datum","index","nodes","select","attrs","node","key","attr","darkColorScheme19","chartPadding","top","right","bottom","left","toTooltipHtml","name","category","value","appendTiles","chart","colorScale","maxArea","d3plus","max","x","y","class","transform","call","g","fill","on","show","hide","text","bounds","Math","pow","scaleText","appendLegend","shapeWidth","domain","length","id","style","orient","shape","shapePadding","shapeHeight","labelWrap","scale","treemapChart","rawData","svgWidth","svgHeight","paddedChart","undefined","hierarchy","sum","treemap","size","paddingOuter","layout","leaves","toTreemap","map","x0","x1","y0","y1","other","scaleOrdinal","Set","range","parse","direction","offset","getBoundingClientRect","html","createTip","FullScreenContainer","marginTop","DataSetDisplay","useState","setData","document","fetch","then","response","json","useMemo","useDimensions","Links","DataSetSelector","keys","Object","to","path","join","render","match","params","App","useFccTest","fccTest","FccTests","tree_map","queryParam","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05aedf1c.chunk.js","sourcesContent":["const DataSets = {\n  kickstarter: {\n    title: 'Kickstarter Pledges',\n    description: 'Top 100 Most Pledged Kickstarter Campaigns Grouped By Category',\n    url: 'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/kickstarter-funding-data.json'\n  },\n  movies: {\n    title: 'Movie Sales',\n    description: 'Top 100 Highest Grossing Movies Grouped By Genre',\n    url: 'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json'\n  },\n  games: {\n    title: 'Video Game Sales',\n    description: 'Top 100 Most Sold Video Games Grouped by Platform',\n    url: 'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json'\n  }\n}\n\nexport default DataSets\n","import * as d3 from 'd3'\nimport { useRef, useEffect } from 'react'\n\nconst useD3 = (fn) => {\n  const ref = useRef()\n\n  useEffect(\n    () => fn(d3.select(ref.current)),\n    [fn]\n  )\n\n  return ref\n}\n\nexport default useD3\n","import React, { useCallback } from 'react'\nimport useD3 from '../hooks/useD3'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst SvgContainer = styled.div`\n    display: block;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    svg {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n`\n\nconst ScaledD3Container = ({ drawSvg, viewBox: { width = 100, height = 100 } }) => {\n  const draw = useCallback(svg => {\n    svg.selectAll('*').remove()\n    drawSvg(svg, width, height)\n  }, [drawSvg, height, width])\n\n  const ref = useD3(draw)\n\n  return (\n    <SvgContainer>\n      <svg\n        ref={ref}\n        preserveAspectRatio = 'xMidYMid meet'\n        viewBox = {`0 0 ${width} ${height}`}\n      />\n    </SvgContainer>\n  )\n}\n\nScaledD3Container.propTypes = {\n  drawSvg: PropTypes.func.isRequired,\n  viewBox: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  })\n}\n\nexport default ScaledD3Container\n","import * as d3 from 'd3'\nimport tip from 'd3-tip'\nimport { textwrap } from 'd3-textwrap'\nimport { legendColor } from 'd3-svg-legend'\n\nconst dsplus = { ...d3, tip, legendColor, textwrap }\n\ndsplus.selection.prototype.appendForEach = function (obj, data) {\n  return this.selectAll(null).data(data).enter().append(obj)\n}\n\ndsplus.selection.prototype.forEach = function (action) {\n  return this.each(function (datum, index, nodes) {\n    const selection = dsplus.select(this)\n    action(selection, datum, index, nodes)\n  })\n}\n\ndsplus.selection.prototype.attrs = function (attrs) {\n  if (typeof attrs === 'function') {\n    this.forEach((node, datum, index, nodes) =>\n      node.attrs(attrs(datum, index, nodes))\n    )\n  } else {\n    for (const key in attrs) {\n      this.attr(key, attrs[key])\n    }\n  }\n\n  return this\n}\n\nexport default dsplus\n","const darkColorScheme19 = [\n  '#2d5b6a',\n  '#724328',\n  '#312b57',\n  '#305322',\n  '#5e3358',\n  '#193711',\n  '#4a527e',\n  '#545025',\n  '#283147',\n  '#316142',\n  '#521c20',\n  '#2f564f',\n  '#773e4a',\n  '#1d3621',\n  '#50434f',\n  '#2b3412',\n  '#183537',\n  '#3e2d1b',\n  '#595242'\n]\n\nexport default darkColorScheme19\n","import d3plus from './d3plus'\nimport darkColorScheme19 from './darkColorScheme19'\n\nconst chartPadding = { top: 5, right: 5, bottom: 85, left: 5 }\n\nconst treemapChart = (rawData) => (svg, svgWidth, svgHeight) => {\n  const { chart, width, height } = paddedChart(svg, svgWidth, svgHeight, chartPadding)\n\n  if (rawData.name === undefined) {\n    return\n  }\n\n  const data = parse(rawData, width, height)\n\n  const tip = createTip(chart, data)\n\n  chart\n    .call(tip)\n    .call(appendTiles, data, tip)\n    .call(appendLegend, data)\n}\n\nfunction paddedChart (svg, svgWidth, svgHeight, { left, top, right, bottom }) {\n  svg.append('rect').attrs({\n    id: 'background',\n    x: 0,\n    y: 0,\n    width: svgWidth,\n    height: svgHeight\n  })\n\n  return {\n    chart: svg.append('g')\n      .attr('transform', `translate(${left}, ${top})`),\n    width: svgWidth - left - right,\n    height: svgHeight - right - bottom\n  }\n}\n\nfunction parse (rawData, width, height) {\n  const data = toTreemap(rawData, width, height)\n    .map(({ x0, x1, y0, y1, ...other }) => ({\n      ...other,\n      x: x0,\n      y: y0,\n      width: x1 - x0,\n      height: y1 - y0\n    }))\n\n  const colorScale = d3plus.scaleOrdinal()\n    .domain([...new Set(data.map(({ data: { category } }) => category))])\n    .range(darkColorScheme19)\n\n  return {\n    data,\n    colorScale,\n    width,\n    height\n  }\n}\n\nfunction toTreemap (rawData, width, height) {\n  const hierarchy = d3plus.hierarchy(rawData)\n    .sum(({ value }) => value)\n\n  const layout = d3plus.treemap()\n    .size([width, height])\n    .paddingOuter(2)\n\n  return layout(hierarchy).leaves()\n}\n\nfunction createTip (chart, { width }) {\n  function svgToPixel (svgUnit) {\n    const pixelWidth = chart.node().getBoundingClientRect().width\n    return svgUnit * pixelWidth / width\n  }\n\n  return d3plus.tip()\n    .direction('s')\n    .offset([0, 10])\n    .attr('id', 'tooltip')\n    .attr('data-value', ({ data: { value } }) => value)\n    .style('font-size', () => `${svgToPixel(15)}px`)\n    .html(toTooltipHtml)\n}\n\nconst toTooltipHtml = ({ data: { name, category, value } }) => `\n  Name: ${name}<br/>\n  Category: ${category}<br/>\n  Value: ${value}`\n\nfunction appendTiles (chart, { data, colorScale }, tip) {\n  const maxArea = d3plus.max(data, ({ width, height }) => width * height)\n  const textScaleFactor = 0.3\n  function scaleText (width, height) {\n    return Math.pow(\n      width * height, textScaleFactor) /\n      Math.pow(maxArea, textScaleFactor\n      )\n  }\n\n  chart.appendForEach('g', data)\n    .attrs(({ x, y }) => ({\n      class: 'tileParent',\n      transform: `translate(${x}, ${y})`\n    }))\n    .call(g => {\n      g.append('rect')\n        .attrs(({ width, height, data: { category, name, value } }) => ({\n          class: 'tile',\n          x: 0,\n          y: 0,\n          width,\n          height,\n          fill: colorScale(category),\n          'data-category': category,\n          'data-name': name,\n          'data-value': value\n        }))\n        .on('mouseover', tip.show) // needed to pass FCC test\n        .on('mouseout', tip.hide) // needed to pass FCC test\n    })\n    .forEach((g, { width, height, data: { name } }) => {\n      g.append('text')\n        .text(name)\n        .call(d3plus.textwrap().bounds({ width, height }))\n      g.select('div')\n        .attr('style', `font-size: ${scaleText(width, height) * 20}px`)\n    })\n    .call(g => {\n      g.append('rect')\n        .attrs(({ width, height }) => ({\n          class: 'tileOverlay',\n          x: 0,\n          y: 0,\n          width,\n          height\n        }))\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n    })\n}\n\nfunction appendLegend (chart, { colorScale, width, height }) {\n  const padding = 10\n  const shapeWidth = (width - 2 * padding) / colorScale.domain().length - padding\n\n  chart.append('g')\n    .attrs({\n      id: 'legend',\n      transform: `translate(${padding}, ${height + 2 * padding})`\n    })\n    .style('font-size', '12px')\n    .call(d3plus.legendColor()\n      .orient('horizontal')\n      .shape('rect')\n      .shapePadding(padding)\n      .shapeHeight(15)\n      .shapeWidth(shapeWidth)\n      .labelWrap(shapeWidth)\n      .scale(colorScale)\n    )\n    .call(g => {\n      g.selectAll('rect')\n        .attr('class', 'legend-item')\n    })\n}\n\nexport default treemapChart\n","import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport ScaledD3Container from './ScaledD3Container'\nimport treemapChart from '../d3/treemap'\nimport useDimensions from 'react-use-dimensions'\nimport PropTypes from 'prop-types'\nimport './style.css'\nimport '../d3/treemap.css'\n\nconst FullScreenContainer = styled.div`\n    padding: 10px;\n    height: calc(100vh - ${({ marginTop }) => `${marginTop}px`});\n`\n\nconst DataSetDisplay = ({ title, description, url }) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    document.title = title\n\n    fetch(url)\n      .then(response => response.json())\n      .then(json => setData(json))\n  }, [title, url])\n\n  const chart = useMemo(() => treemapChart(data), [data])\n\n  const [ref, { height }] = useDimensions()\n  return (\n    <>\n      <div ref={ref}>\n        <h1 id='title'>{title}</h1>\n        <h3 id='description'>{description}</h3>\n      </div>\n      <FullScreenContainer marginTop={height + 40}>\n        <ScaledD3Container drawSvg={chart} viewBox={{ width: 1600, height: 900 }} />\n      </FullScreenContainer>\n    </>\n  )\n}\n\nDataSetDisplay.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  url: PropTypes.string\n}\n\nexport default DataSetDisplay\n","import React from 'react'\nimport { Switch, Route, Link, Redirect } from 'react-router-dom'\nimport DataSets from './DataSets'\nimport DataSetDisplay from './DataSetDisplay'\nimport styled from 'styled-components'\n\nconst Links = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`\n\nconst DataSetSelector = () => {\n  const keys = Object.keys(DataSets)\n\n  return (\n    <>\n      <Links>{\n        keys.map(key => {\n          const { title } = DataSets[key]\n          return (\n            <div key={key}>\n              <Link to={`/${key}`}>{title}</Link>\n            </div>\n          )\n        })\n      }</Links>\n\n      <Switch>\n        <Route path={`/:key(${keys.join('|')})`}\n          render={({ match: { params: { key } } }) =>\n            <DataSetDisplay {...DataSets[key]} />\n          }\n        />\n        <Redirect to={keys[0]}/>\n      </Switch>\n    </>\n  )\n}\n\nexport default DataSetSelector\n","import React from 'react'\nimport DataSetSelector from './DataSetSelector'\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test'\nimport { HashRouter as Router } from 'react-router-dom'\n\nconst App = () => {\n  useFccTest({\n    fccTest: FccTests.tree_map,\n    queryParam: 'fcc-test'\n  })\n\n  return (\n    <Router>\n      <DataSetSelector />\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}